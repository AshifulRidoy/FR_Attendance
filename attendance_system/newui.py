# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import cv2
import os
import csv
import numpy as np
from PIL import Image
import pandas as pd
import datetime
import time
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(795, 229)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 771, 161))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.id_input = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.id_input.setObjectName("id_input")
        self.horizontalLayout.addWidget(self.id_input)
        self.name_input = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.name_input.setObjectName("name_input")
        self.horizontalLayout.addWidget(self.name_input)
        self.notification = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.notification.sizePolicy().hasHeightForWidth())
        self.notification.setSizePolicy(sizePolicy)
        self.notification.setText("")
        self.notification.setObjectName("notification")
        self.horizontalLayout.addWidget(self.notification)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.capture_image = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.capture_image.setObjectName("capture_image")
        self.horizontalLayout_2.addWidget(self.capture_image)
        self.train_image = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.train_image.setAutoDefault(False)
        self.train_image.setDefault(False)
        self.train_image.setFlat(False)
        self.train_image.setObjectName("train_image")
        self.horizontalLayout_2.addWidget(self.train_image)
        self.attendance_mark = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.attendance_mark.setObjectName("attendance_mark")
        self.horizontalLayout_2.addWidget(self.attendance_mark)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.attendance_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.attendance_label.sizePolicy().hasHeightForWidth())
        self.attendance_label.setSizePolicy(sizePolicy)
        self.attendance_label.setAlignment(QtCore.Qt.AlignCenter)
        self.attendance_label.setObjectName("attendance_label")
        self.horizontalLayout_3.addWidget(self.attendance_label)
        self.attendance_output_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.attendance_output_label.sizePolicy().hasHeightForWidth())
        self.attendance_output_label.setSizePolicy(sizePolicy)
        self.attendance_output_label.setText("")
        self.attendance_output_label.setObjectName("attendance_output_label")
        self.horizontalLayout_3.addWidget(self.attendance_output_label)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 795, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        self.capture_image.clicked.connect(clickbutton)

        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Attendance System"))
        MainWindow.setWindowIcon(QtGui.QIcon('fr.ico'))
        self.id_input.setPlaceholderText(_translate("MainWindow", "Enter Your ID"))
        self.name_input.setPlaceholderText(_translate("MainWindow", "Enter Your Name"))
        self.capture_image.setText(_translate("MainWindow", "Capture Image"))
        self.train_image.setText(_translate("MainWindow", "Train Image"))
        self.attendance_mark.setText(_translate("MainWindow", "Mark Attendance"))
        self.attendance_label.setText(_translate("MainWindow", "ATTENDANCE :"))












def clickbutton():
    print("clicked")








def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        pass

    try:
        import unicodedata
        unicodedata.numeric(s)
        return True
    except (TypeError, ValueError):
        pass

    return False







def TakeImages(Ui_MainWindow):
    Id = Ui_MainWindow.id_input.text()
    name = Ui_MainWindow.name_input.text()

    if not Id:
        res = "Please enter Id"
        message.configure(text=res)
        MsgBox = tk.messagebox.askquestion(
            "Warning", "Please enter roll number properly , press yes if you understood", icon='warning')
        if MsgBox == 'no':
            tk.messagebox.showinfo(
                'Your need', 'Please go through the readme file properly')
    elif not name:
        res = "Please enter Name"
        message.configure(text=res)
        MsgBox = tk.messagebox.askquestion(
            "Warning", "Please enter your name properly , press yes if you understood", icon='warning')
        if MsgBox == 'no':
            tk.messagebox.showinfo(
                'Your need', 'Please go through the readme file properly')

    elif(is_number(Id) and name.isalpha()):
        cam = cv2.VideoCapture('http://192.168.0.177:56000/mjpeg')
        harcascadePath = "haarcascade_frontalface_default.xml"
        detector = cv2.CascadeClassifier(harcascadePath)
        sampleNum = 0
        while(True):
            ret, img = cam.read()
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            faces = detector.detectMultiScale(gray, 1.3, 5)
            for (x, y, w, h) in faces:
                cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)
                # incrementing sample number
                sampleNum = sampleNum+1
                # saving the captured face in the dataset folder TrainingImage
                cv2.imwrite("TrainingImage\ "+name + "."+Id + '.' +
                            str(sampleNum) + ".jpg", gray[y:y+h, x:x+w])
                # display the frame
                cv2.imshow('frame', img)
            # wait for 100 miliseconds
            if cv2.waitKey(100) & 0xFF == ord('q'):
                break
            # break if the sample number is morethan 100
            elif sampleNum > 60:
                break
        cam.release()
        cv2.destroyAllWindows()
        res = "Images Saved for ID : " + Id + " Name : " + name
        row = [Id, name]
        with open('StudentDetails\StudentDetails.csv', 'a+') as csvFile:
            writer = csv.writer(csvFile)
            writer.writerow(row)
        csvFile.close()
        message.configure(text=res)
    else:
        if(is_number(Id)):
            res = "Enter Alphabetical Name"
            message.configure(text=res)
        if(name.isalpha()):
            res = "Enter Numeric Id"
            message.configure(text=res)




















if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
